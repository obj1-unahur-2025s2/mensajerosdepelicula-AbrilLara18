import mensajeros.*
import paquetes.*
import destinos.*

describe "test parte 1" {
  test "Que roberto (90kg) puede llevar un paquete que está pago en un camión que tiene un acoplado." {
    roberto.cambiarVehiculo(camion)
    paquete.estaPago()
    assert.that(paquete.puedeEntregarse(roberto))
  }
  
  test "Que neo con crédito no puede llevar un paquete que no está pago a la matrix." {
    neo.tieneCredito(true)
    paquete.cambiarDestino(matrix)
    assert.notThat(paquete.puedeEntregarse(neo))
  }
}

describe "test parte 2 " {
  
  test "la mensajeria los despide a todos y contrata a peter parker pero es pequeña " {
    empresaMensajeria.despedirATodos()
    empresaMensajeria.contratarA(peterParker)
    assert.notThat(empresaMensajeria.esGrande())
  }
  
  test "la mensajeria despide a neo" {
    empresaMensajeria.despedirA(neo)
    assert.notThat(empresaMensajeria.mensajeros().contains(neo))
  }
  
  test "el primer mensajero puede entregar el paquetito " {
    assert.that(empresaMensajeria.puedeEntregarElPrimero(paquetito))
  }
  
  test "el ultimo mensajero es chuckNorris y pesa 80 kilos " {
    assert.equals(80, empresaMensajeria.pesoDelUltimo())
  }
  
  test "un paquetito puede ser entregado por algun mensajero" {
    assert.that(empresaMensajeria.puedeEntregarAlguno(paquetito))
  }
  
  test "roberto tiene 7 acoplados y por eso chuckNorris y neo pueden llevar el paquete por el puente de brooklyn pero roberto no" {
    paquete.estaPago()
    roberto.cambiarVehiculo(camion)
    camion.cambiarAcoplado(7)
    assert.notThat(empresaMensajeria.losQuePuendenEntregar(paquete).contains(roberto))
  }
  
  test "roberto,tiene 9 acoplados en su camion y la mensajeria tiene sobrepeso" {
    camion.cambiarAcoplado(5)
    roberto.cambiarVehiculo(camion)
    assert.that(empresaMensajeria.tieneSobrepeso())
  }
  
  test "la mensajeria puede enviar el paquetito y lo puede enviar cualquiera de sus mensajeros" {
    assert.that(empresaMensajeria.puedeEntregarAlguno(paquetito))
  }
  
  test "la mensajeria envia 2 paquetes y un paqueton viajero de tres destinos y tiene una facturizacion de 200" {
    paquete.estaPago()
    paquete.estaPago()
    paquetonViajero.agregarDestino(puenteBrooklyn)
    paquetonViajero.pagar(300)
    empresaMensajeria.enviarTodos([paquete,paquete,paquetonViajero])
    assert.equals(400, empresaMensajeria.facturacion())
  }
  
  test "la mensajeria envia a todo el conjunto de 2 paquetitos y un paquete y factura 100" {
    paquete.estaPago()
    paquete.estaPago()
    empresaMensajeria.enviarTodos([paquete,paquete,paquetito])
    assert.equals(100, empresaMensajeria.facturacion())
  }
  
  test "la mensajeria tiene para enviar dos paquetes y un paqueton con 5 destinos y logra enviar el mas caro,facturando 500" {
    empresaMensajeria.enviarPaquete(paquete)
    empresaMensajeria.enviarPaquete(paquete)
    paquetonViajero.agregarDestino(matrix)
    paquetonViajero.agregarDestino(matrix)
    paquetonViajero.agregarDestino(puenteBrooklyn)
    empresaMensajeria.enviarPaquete(paquetonViajero)
    paquetonViajero.pagar(500)
    empresaMensajeria.enviarElMasCaro()
    assert.equals(500, empresaMensajeria.facturacion())
  }

}
  describe"test parte 3"{
    test "la empresa contrata a peterParker" {
      empresaMensajeria.contratarA(peterParker)
      assert.that(empresaMensajeria.mensajeros().contains(peterParker))
    }
    test"la empresa solo tiene a neo y se envia paquete porque neo tiene credito y puede entrar a la matrix"{
      paquete.estaPago()
      empresaMensajeria.despedirA(roberto)
      empresaMensajeria.despedirA(chuckNorris)
      paquete.cambiarDestino(matrix)
      empresaMensajeria.enviarPaquete(paquete)
      assert.that(empresaMensajeria.paquetesEnviados().contains(paquete))
    }
    test"la empresa despide a todos y nadie puede enviar el paquete"{
      paquete.estaPago()
      empresaMensajeria.despedirATodos()
      empresaMensajeria.enviarPaquete(paquete)
      assert.notThat(empresaMensajeria.paquetesEnviados().contains(paquete))
    }
    test"la empresa despide a todos y contrata a roberto pero este no puede entrar a la matrix por eso no se puede entregar el paquete"{
      paquete.estaPago()
      paquete.cambiarDestino(matrix)
      empresaMensajeria.despedirATodos()
      empresaMensajeria.contratarA(roberto)
      empresaMensajeria.enviarPaquete(paquete)
      assert.notThat(empresaMensajeria.paquetesEnviados().contains(paquete))
      assert.that(empresaMensajeria.paquetePendientes().contains(paquete))
    }
     test "la mensajeria puede no puede enviar el paquete a la matrix porque el primero es roberto" {
    paquete.estaPago()
    paquete.cambiarDestino(matrix)
    assert.notThat(empresaMensajeria.puedeEntregarElPrimero(paquete))
  }
  }